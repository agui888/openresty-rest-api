worker_processes  1;        
error_log logs/error.log;   
events {
    worker_connections 1024;
}

http {

    lua_package_path './lua/?.lua;;';
    lua_code_cache off;

    server {
        listen 8787;
        location /string {
            default_type text/html;

            content_by_lua_block {
                local handle = require('framework.handle')
                ngx.say(handle({GET = "hello"}))
            }
        }

        location /number {
            default_type text/html;

            content_by_lua_block {
                local handle = require('framework.handle')
                ngx.say(handle({GET = 10}))
            }
        }

        location /boolean {
            default_type text/html;

            content_by_lua_block {
                local handle = require('framework.handle')
                ngx.say(handle({GET = true}))
            }
        }

        location /table {
            default_type text/html;

            content_by_lua_block {
                local handle = require('framework.handle')
                ngx.say(handle({GET = {name = 'soyking', age = 11}}))
            }
        }

        location /func/success {
            default_type text/html;

            content_by_lua_block {
                local handle = require('framework.handle')
                local f = function() 
                    return "success data"
                end
                ngx.say(handle({GET = f}))
            }
        }

        location /func/error1 {
            default_type text/html;

            content_by_lua_block {
                local handle = require('framework.handle')
                local f = function()
                    return nil, 'invalid input'
                end
                ngx.say(handle({GET = f}))
            }
        }

        location /func/error2 {
            default_type text/html;

            content_by_lua_block {
                local handle = require('framework.handle')
                local f = function()
                    return nil, {code = 401, error = 'auth err'}
                end
                ngx.say(handle({GET = f}))
            }
        }
    }
}